/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrames;

import DB.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Himal
 */
public class IssueBook extends javax.swing.JFrame {
    //declaring instance variables
    Connection connection;
    Statement statement;
    ResultSet rsltSet;
    PreparedStatement pStatement;

    boolean isbookIdvalid = false;
    boolean isStudentIdValid = false;
    boolean isLending = false;
    boolean isBookIdSearched = false;
    boolean isStudentIdSearched = false;
    boolean isDateValid = false;
    boolean isBookAvailable = false;

    String DBTitle = "";
    String DBAuthor = "";
    int DBNoOfPages = 0;
    int DBLendingPeriod = 0;
    double DBFine = 0.0;
    String DBName = "";
    String DBAdmissionNumber = "";
    String DBFaculty = "";
    int DBYear = 0;

    /**
     * Creates new form IssueBook
     */
    public IssueBook() {
        initComponents();

        //initializes the connection to database
        connection = DBConnection.getDBConnection().getConnection();

        //disables the specific text fields at beginning
        jTxtTitle.disable();
        jTxtAuthor.disable();
        jTxtNoOfPages.disable();
        jTxtType.disable();
        jTxtLendingPeriod.disable();

        jTxtName.disable();
        jTxtAdmissionNumber.disable();
        jTxtFaculty.disable();
        jTxtYear.disable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTxtLendingPeriod = new javax.swing.JTextField();
        jTxtBookID = new javax.swing.JTextField();
        jTxtNoOfPages = new javax.swing.JTextField();
        jTxtAuthor = new javax.swing.JTextField();
        jBtnSearchBook = new javax.swing.JButton();
        jTxtType = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTxtTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTxtStudentID = new javax.swing.JTextField();
        jTxtFaculty = new javax.swing.JTextField();
        jTxtAdmissionNumber = new javax.swing.JTextField();
        jBtnSearchStudent = new javax.swing.JButton();
        jTxtYear = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTxtName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jDateChooserIssuedDate = new com.toedter.calendar.JDateChooser();
        jBtnIssue = new javax.swing.JButton();
        jBtnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Issue Books");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 51)), "Book Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(153, 0, 153))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Number of pages");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Lending period in days");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Book ID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Title");

        jTxtLendingPeriod.setEditable(false);
        jTxtLendingPeriod.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxtBookID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTxtBookID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtBookIDKeyTyped(evt);
            }
        });

        jTxtNoOfPages.setEditable(false);
        jTxtNoOfPages.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxtAuthor.setEditable(false);
        jTxtAuthor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jBtnSearchBook.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBtnSearchBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jBtnSearchBook.setText("Search");
        jBtnSearchBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSearchBookActionPerformed(evt);
            }
        });

        jTxtType.setEditable(false);
        jTxtType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Author");

        jTxtTitle.setEditable(false);
        jTxtTitle.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Type");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtnSearchBook))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtNoOfPages, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtType, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtLendingPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtnSearchBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtNoOfPages, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtType, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtLendingPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 51)), "Student Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(0, 153, 153))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Faculty");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Student ID");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Name");

        jTxtStudentID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTxtStudentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtStudentIDKeyTyped(evt);
            }
        });

        jTxtFaculty.setEditable(false);
        jTxtFaculty.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTxtAdmissionNumber.setEditable(false);
        jTxtAdmissionNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jBtnSearchStudent.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBtnSearchStudent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jBtnSearchStudent.setText("Search");
        jBtnSearchStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSearchStudentActionPerformed(evt);
            }
        });

        jTxtYear.setEditable(false);
        jTxtYear.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Admission Number");

        jTxtName.setEditable(false);
        jTxtName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Year");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtnSearchStudent))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtName, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtAdmissionNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTxtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtnSearchStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtAdmissionNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTxtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)), "Issue Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(204, 0, 0))); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("Date of issue");

        jDateChooserIssuedDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jDateChooserIssuedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserIssuedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jBtnIssue.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBtnIssue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/issue_book.png"))); // NOI18N
        jBtnIssue.setText("Issue");
        jBtnIssue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIssueActionPerformed(evt);
            }
        });

        jBtnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBtnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/back.png"))); // NOI18N
        jBtnBack.setText("Back");
        jBtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jBtnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnIssue)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtnIssue, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jBtnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnSearchBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSearchBookActionPerformed
        //if the bookID textfield is not empty
        if (!jTxtBookID.getText().equals("")) {
            try {
                int bookID = Integer.parseInt(jTxtBookID.getText());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Enter a valid number for book ID");
                return;
            }
            int bookID = Integer.parseInt(jTxtBookID.getText());

            isBookIdSearched = true;

            //searches the book table for given bookID
            try {
                String query = "SELECT * FROM book WHERE Book_ID = " + "'" + bookID + "'";

                statement = connection.createStatement();
                rsltSet = statement.executeQuery(query);

                //if the result set is not empty
                if (rsltSet.next()) {
                    isbookIdvalid = true;

                    rsltSet.first(); //selects the first row of the result set
                    DBTitle = rsltSet.getString(2);
                    DBAuthor = rsltSet.getString(3);
                    DBNoOfPages = rsltSet.getInt(4);
                    String type = rsltSet.getString(5);
                    DBLendingPeriod = rsltSet.getInt(6);
                    DBFine = rsltSet.getDouble(7);

                    //enables the specific text fields
                    jTxtTitle.enable();
                    jTxtAuthor.enable();
                    jTxtNoOfPages.enable();
                    jTxtType.enable();
                    jTxtLendingPeriod.enable();

                    jTxtTitle.setText(DBTitle);
                    jTxtAuthor.setText(DBAuthor);
                    jTxtNoOfPages.setText(String.valueOf(DBNoOfPages));
                    jTxtType.setText(type);

                    if (type.equals("Reference")) {
                        jTxtLendingPeriod.disable();
                        jTxtLendingPeriod.setText("This book is only for reference");

                        isLending = false;
                    } else if (type.equals("Lending")) {
                        jTxtLendingPeriod.setText(String.valueOf(DBLendingPeriod));

                        isLending = true;
                    }

                    statement.close();
                    rsltSet.close();
                } else {
                    jTxtTitle.setText(null);
                    jTxtAuthor.setText(null);
                    jTxtType.setText(null);
                    jTxtNoOfPages.setText(null);
                    jTxtLendingPeriod.setText(null);

                    jTxtTitle.disable();
                    jTxtAuthor.disable();
                    jTxtType.disable();
                    jTxtNoOfPages.disable();
                    jTxtLendingPeriod.disable();

                    JOptionPane.showMessageDialog(null, "Book ID not found in database");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        } else if (jTxtBookID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter the Book ID");
        }

    }//GEN-LAST:event_jBtnSearchBookActionPerformed

    private void jBtnSearchStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSearchStudentActionPerformed
        //if the studentID text field is not empty
        if (!jTxtStudentID.getText().equals("")) {
            try {
                int studentID = Integer.parseInt(jTxtStudentID.getText());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Enter a valid number for student ID");
                return;
            }
            int studentID = Integer.parseInt(jTxtStudentID.getText());

            isStudentIdSearched = true;

            //searches the student table for given studentID
            try {
                String query = "SELECT * FROM student WHERE Student_ID = " + "'" + studentID + "'";

                statement = connection.createStatement();
                rsltSet = statement.executeQuery(query);

                //if the result set is not empty
                if (rsltSet.next()) {
                    isStudentIdValid = true;

                    rsltSet.first(); //selects the first row of the result set
                    DBName = rsltSet.getString(2);
                    DBAdmissionNumber = rsltSet.getString(3);
                    DBFaculty = rsltSet.getString(4);
                    DBYear = rsltSet.getInt(5);

                    //enables the specific text fields
                    jTxtName.enable();
                    jTxtAdmissionNumber.enable();
                    jTxtFaculty.enable();
                    jTxtYear.enable();

                    jTxtName.setText(DBName);
                    jTxtAdmissionNumber.setText(DBAdmissionNumber);
                    jTxtFaculty.setText(DBFaculty);
                    jTxtYear.setText(String.valueOf(DBYear));

                    statement.close();
                    rsltSet.close();
                } else {
                    jTxtName.setText(null);
                    jTxtAdmissionNumber.setText(null);
                    jTxtFaculty.setText(null);
                    jTxtYear.setText(null);

                    jTxtName.disable();
                    jTxtAdmissionNumber.disable();
                    jTxtFaculty.disable();
                    jTxtYear.disable();

                    JOptionPane.showMessageDialog(null, "Student ID not found in database");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        } else if (jTxtStudentID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter the Student ID");
        }
    }//GEN-LAST:event_jBtnSearchStudentActionPerformed

    private void jBtnIssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIssueActionPerformed
        //if the bookID and studentID text fields are not empty and a date is selected
        if (!jTxtBookID.getText().equals("") && !jTxtStudentID.getText().equals("") && jDateChooserIssuedDate.getDate() != null) {
            //checks whether the input is a number
            try {
                int x = Integer.parseInt(jTxtBookID.getText());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Enter a valid number for book ID");
                return;
            }

            //checks whether the input is a number
            try {
                int y = Integer.parseInt(jTxtStudentID.getText());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Enter a valid number for student ID");
                return;
            }

            //if the given bookID and studentID are searched (if the two search buttons are clicked)
            if (isBookIdSearched && isStudentIdSearched) {
                Date issuedDate = jDateChooserIssuedDate.getDate();

                //checks whether the selected date is valid
                isDateValid = isDateValid(issuedDate);

                //casts the selected date into sql Date format
                java.sql.Date issuedDateSql = new java.sql.Date(issuedDate.getTime());

                //checks whether the given bookID is not in the book_issue table
                isBookAvailable = isBookAvailable(Integer.parseInt(jTxtBookID.getText()));

                //if the bookID, studentID and the selected date are valid and the given book is not reference and not already issued
                if (isLending && isStudentIdValid && isbookIdvalid && isDateValid && isBookAvailable) {
                    int bookID = Integer.parseInt(jTxtBookID.getText());
                    int studentID = Integer.parseInt(jTxtStudentID.getText());

                    //inserts the data into book_issue table
                    try {
                        String query = "INSERT INTO issued_book (Book_ID, Title, Author, NoOfPages, Lending_Period, Fine, Student_ID, Name, Admission_Number, Faculty, Year, Issued_Date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        pStatement = connection.prepareStatement(query);

                        pStatement.setInt(1, bookID);
                        pStatement.setString(2, DBTitle);
                        pStatement.setString(3, DBAuthor);
                        pStatement.setInt(4, DBNoOfPages);
                        pStatement.setInt(5, DBLendingPeriod);
                        pStatement.setDouble(6, DBFine);
                        pStatement.setInt(7, studentID);
                        pStatement.setString(8, DBName);
                        pStatement.setString(9, DBAdmissionNumber);
                        pStatement.setString(10, DBFaculty);
                        pStatement.setInt(11, DBYear);
                        pStatement.setDate(12, issuedDateSql);
                        pStatement.execute();
                        JOptionPane.showMessageDialog(null, "Successfully added to the database");
                        pStatement.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(Signup.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, ex);
                    }
                } else {
                    if (!isbookIdvalid) {
                        JOptionPane.showMessageDialog(null, "Book ID not found in database");
                    } else if (!isStudentIdValid) {
                        JOptionPane.showMessageDialog(null, "Student ID not found in database");
                    } else if (!isLending && isbookIdvalid) {
                        JOptionPane.showMessageDialog(null, "This book is only for reference");
                    } else if (!isDateValid) {
                        JOptionPane.showMessageDialog(null, "Enter a valid date");
                    } else if (!isBookAvailable && isbookIdvalid) {
                        JOptionPane.showMessageDialog(null, "This book is already issued");
                    }
                }

                //if the bookID or studentID is not searched
                //(if either bookID is not searched or studentID is not searched)
            } else if (!isBookIdSearched || !isStudentIdSearched) {
                Date issuedDate = jDateChooserIssuedDate.getDate();

                //checks whether the selected date is valid
                isDateValid = isDateValid(issuedDate);

                //casts the selected date into sql Date format
                java.sql.Date issuedDateSql = new java.sql.Date(issuedDate.getTime());

                //checks whether the book is not already issued
                isBookAvailable = isBookAvailable(Integer.parseInt(jTxtBookID.getText()));

                //if the studentID is searched and bookID is not searched
                //if the search button of studentID is clicked and search button of bookID is not clicked)
                if (!isBookIdSearched && isStudentIdSearched) {
                    int bookID = Integer.parseInt(jTxtBookID.getText());

                    //searches the book table for given bookID
                    try {
                        String query = "SELECT * FROM book WHERE Book_ID = " + "'" + bookID + "'";

                        statement = connection.createStatement();
                        rsltSet = statement.executeQuery(query);

                        if (rsltSet.next()) { //if the result set is not empty
                            isbookIdvalid = true;

                            rsltSet.first(); //selects the last row of the result set
                            DBTitle = rsltSet.getString(2);
                            DBAuthor = rsltSet.getString(3);
                            DBNoOfPages = rsltSet.getInt(4);
                            String type = rsltSet.getString(5);
                            DBLendingPeriod = rsltSet.getInt(6);
                            DBFine = rsltSet.getDouble(7);

                            if (type.equals("Reference")) {
                                isLending = false;
                            } else if (type.equals("Lending")) {
                                isLending = true;
                            }

                            statement.close();
                            rsltSet.close();
                        } else {
                            JOptionPane.showMessageDialog(null, "Book ID not found in database");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }

                    //if the bookID, studentID and selected date are valid and the book is not reference and not already issued
                    if (isLending && isStudentIdValid && isbookIdvalid && isDateValid && isBookAvailable) {
                        int studentID = Integer.parseInt(jTxtStudentID.getText());

                        //inserts the data into book_issue table
                        try {
                            String query = "INSERT INTO issued_book (Book_ID, Title, Author, NoOfPages, Lending_Period, Fine, Student_ID, Name, Admission_Number, Faculty, Year, Issued_Date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            pStatement = connection.prepareStatement(query);

                            pStatement.setInt(1, bookID);
                            pStatement.setString(2, DBTitle);
                            pStatement.setString(3, DBAuthor);
                            pStatement.setInt(4, DBNoOfPages);
                            pStatement.setInt(5, DBLendingPeriod);
                            pStatement.setDouble(6, DBFine);
                            pStatement.setInt(7, studentID);
                            pStatement.setString(8, DBName);
                            pStatement.setString(9, DBAdmissionNumber);
                            pStatement.setString(10, DBFaculty);
                            pStatement.setInt(11, DBYear);
                            pStatement.setDate(12, issuedDateSql);

                            pStatement.execute();
                            JOptionPane.showMessageDialog(null, "Successfully added to the database");
                            pStatement.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(Signup.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, ex);
                        }
                    } else {
                        if (!isStudentIdValid) {
                            JOptionPane.showMessageDialog(null, "Student ID not found in database");
                        } else if (!isLending && isbookIdvalid) {
                            JOptionPane.showMessageDialog(null, "This book is only for reference");
                        } else if (!isDateValid) {
                            JOptionPane.showMessageDialog(null, "Enter a valid date");
                        } else if (!isBookAvailable && isbookIdvalid) {
                            JOptionPane.showMessageDialog(null, "This book is already issued");
                        }
                    }
                }

                //if the bookID is searched and the studentID is not searched
                //(if the search button of bookID is clicked and the search button of studentID is not clicked)
                if (!isStudentIdSearched && isBookIdSearched) {
                    int studentID = Integer.parseInt(jTxtStudentID.getText());

                    //searches the student table for given studentID
                    try {
                        String query = "SELECT * FROM student WHERE Student_ID = " + "'" + studentID + "'";

                        statement = connection.createStatement();
                        rsltSet = statement.executeQuery(query);

                        if (rsltSet.next()) { //if the result set is not empty
                            isStudentIdValid = true;

                            DBName = rsltSet.getString(2);
                            DBAdmissionNumber = rsltSet.getString(3);
                            DBFaculty = rsltSet.getString(4);
                            DBYear = rsltSet.getInt(5);

                            statement.close();
                            rsltSet.close();
                        } else {
                            JOptionPane.showMessageDialog(null, "Student ID not found in database");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }

                    //if the bookID, studentID and selected date are valid and the book is not reference and not already issued
                    if (isLending && isStudentIdValid && isbookIdvalid && isDateValid && isBookAvailable) {
                        int bookID = Integer.parseInt(jTxtBookID.getText());

                        //inserts the data into book_issue table
                        try {
                            String query = "INSERT INTO issued_book (Book_ID, Title, Author, NoOfPages, Lending_Period, Fine, Student_ID, Name, Admission_Number, Faculty, Year, Issued_Date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            pStatement = connection.prepareStatement(query);

                            pStatement.setInt(1, bookID);
                            pStatement.setString(2, DBTitle);
                            pStatement.setString(3, DBAuthor);
                            pStatement.setInt(4, DBNoOfPages);
                            pStatement.setInt(5, DBLendingPeriod);
                            pStatement.setDouble(6, DBFine);
                            pStatement.setInt(7, studentID);
                            pStatement.setString(8, DBName);
                            pStatement.setString(9, DBAdmissionNumber);
                            pStatement.setString(10, DBFaculty);
                            pStatement.setInt(11, DBYear);
                            pStatement.setDate(12, issuedDateSql);

                            pStatement.execute();
                            JOptionPane.showMessageDialog(null, "Successfully added to the database");
                            pStatement.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(Signup.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, ex);
                        }
                    } else {
                        if (!isbookIdvalid) {
                            JOptionPane.showMessageDialog(null, "Book ID not found in database");
                        } else if (!isLending && isbookIdvalid) {
                            JOptionPane.showMessageDialog(null, "This book is only for reference");
                        } else if (!isDateValid) {
                            JOptionPane.showMessageDialog(null, "Enter a valid date");
                        } else if (!isBookAvailable && isbookIdvalid) {
                            JOptionPane.showMessageDialog(null, "This book is already issued");
                        }
                    }
                }

                //if both the bookID and studentID are not searched
                //(if both search buttons are not clicked)
                if (!isBookIdSearched && !isStudentIdSearched) {
                    int bookID = Integer.parseInt(jTxtBookID.getText());

                    //searches the book table for given bookID
                    try {
                        String query = "SELECT * FROM book WHERE Book_ID = " + "'" + bookID + "'";

                        statement = connection.createStatement();
                        rsltSet = statement.executeQuery(query);

                        if (rsltSet.next()) { //if the result set is not empty
                            isbookIdvalid = true;

                            rsltSet.first(); //selects the last row of the result set
                            DBTitle = rsltSet.getString(2);
                            DBAuthor = rsltSet.getString(3);
                            DBNoOfPages = rsltSet.getInt(4);
                            String type = rsltSet.getString(5);
                            DBLendingPeriod = rsltSet.getInt(6);
                            DBFine = rsltSet.getDouble(7);

                            if (type.equals("Reference")) {
                                isLending = false;
                            } else if (type.equals("Lending")) {
                                isLending = true;
                            }

                            statement.close();
                            rsltSet.close();
                        } else {
                            JOptionPane.showMessageDialog(null, "Book ID not found in database");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }

                    int studentID = Integer.parseInt(jTxtStudentID.getText());

                    //searches the student table for given studentID
                    try {
                        String query = "SELECT * FROM student WHERE Student_ID = " + "'" + studentID + "'";

                        statement = connection.createStatement();
                        rsltSet = statement.executeQuery(query);

                        //if the result set is not empty
                        if (rsltSet.next()) {
                            isStudentIdValid = true;

                            DBName = rsltSet.getString(2);
                            DBAdmissionNumber = rsltSet.getString(3);
                            DBFaculty = rsltSet.getString(4);
                            DBYear = rsltSet.getInt(5);

                            statement.close();
                            rsltSet.close();
                        } else {
                            JOptionPane.showMessageDialog(null, "Student ID not found in database");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }

                    //if the bookID, studentID and selected date are valid and book is not reference and not already issued
                    if (isLending && isStudentIdValid && isbookIdvalid && isDateValid && isBookAvailable) {
                        //inserts the data into book_issue table
                        try {
                            String query = "INSERT INTO issued_book (Book_ID, Title, Author, NoOfPages, Lending_Period, Fine, Student_ID, Name, Admission_Number, Faculty, Year, Issued_Date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                            pStatement = connection.prepareStatement(query);

                            pStatement.setInt(1, bookID);
                            pStatement.setString(2, DBTitle);
                            pStatement.setString(3, DBAuthor);
                            pStatement.setInt(4, DBNoOfPages);
                            pStatement.setInt(5, DBLendingPeriod);
                            pStatement.setDouble(6, DBFine);
                            pStatement.setInt(7, studentID);
                            pStatement.setString(8, DBName);
                            pStatement.setString(9, DBAdmissionNumber);
                            pStatement.setString(10, DBFaculty);
                            pStatement.setInt(11, DBYear);
                            pStatement.setDate(12, issuedDateSql);

                            pStatement.execute();
                            JOptionPane.showMessageDialog(null, "Successfully added to the database");
                            pStatement.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(Signup.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, ex);
                        }
                    } else {
                        if (!isLending && isbookIdvalid) {
                            JOptionPane.showMessageDialog(null, "This book is only for reference");
                        } else if (!isDateValid) {
                            JOptionPane.showMessageDialog(null, "Enter a valid date");
                        } else if (!isBookAvailable && isbookIdvalid) {
                            JOptionPane.showMessageDialog(null, "This book is already issued");
                        }
                    }
                }
            }

        } else if (jTxtBookID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter the book ID");
        } else if (jTxtStudentID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter the student ID");
        } else if (jDateChooserIssuedDate.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Select the date of issue");
        }

    }//GEN-LAST:event_jBtnIssueActionPerformed

    private void jBtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBackActionPerformed
        this.dispose();
        new HomePage().setVisible(true);
    }//GEN-LAST:event_jBtnBackActionPerformed

    private void jTxtBookIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtBookIDKeyTyped
        isBookIdSearched = false;
        isbookIdvalid = false;
    }//GEN-LAST:event_jTxtBookIDKeyTyped

    private void jTxtStudentIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtStudentIDKeyTyped
        isStudentIdSearched = false;
        isStudentIdValid = false;
    }//GEN-LAST:event_jTxtStudentIDKeyTyped

    //checks whther the given bookID is already in the book_issue table
    public boolean isBookAvailable(int bookID) {
        boolean isBookAvailable = true;
        try {
            String query = "SELECT * FROM issued_book WHERE Book_ID = " + "'" + bookID + "'";

            statement = connection.createStatement();
            rsltSet = statement.executeQuery(query);

            if (rsltSet.next()) {
                isBookAvailable = false;

                statement.close();
                rsltSet.close();
            } else {
                isBookAvailable = true;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        return isBookAvailable;
    }

    //checks whether the selected date is valid
    public boolean isDateValid(Date issuedDate) {
        boolean isValid = false;
        Date currentDate = new Date();
        long currentDateMillis = currentDate.getTime();
        long issuedDateMillis = issuedDate.getTime();
        if (issuedDateMillis <= currentDateMillis) {
            isValid = true;
        } else {
            isValid = false;
        }
        return isValid;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IssueBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnBack;
    private javax.swing.JButton jBtnIssue;
    private javax.swing.JButton jBtnSearchBook;
    private javax.swing.JButton jBtnSearchStudent;
    private com.toedter.calendar.JDateChooser jDateChooserIssuedDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTxtAdmissionNumber;
    private javax.swing.JTextField jTxtAuthor;
    private javax.swing.JTextField jTxtBookID;
    private javax.swing.JTextField jTxtFaculty;
    private javax.swing.JTextField jTxtLendingPeriod;
    private javax.swing.JTextField jTxtName;
    private javax.swing.JTextField jTxtNoOfPages;
    private javax.swing.JTextField jTxtStudentID;
    private javax.swing.JTextField jTxtTitle;
    private javax.swing.JTextField jTxtType;
    private javax.swing.JTextField jTxtYear;
    // End of variables declaration//GEN-END:variables
}
