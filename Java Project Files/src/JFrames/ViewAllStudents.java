/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrames;

import DB.DBConnection;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Himal
 */
public class ViewAllStudents extends javax.swing.JFrame {
    //decclaring instance variables
    Connection connection;
    Statement statement;
    ResultSet rsltSet;

    boolean haveStudents = false;
    int NoOfStudents = 0;
    Object[][] studentDetails;

    /**
     * Creates new form SearchBook
     */
    public ViewAllStudents() {
        initComponents();

        //initializes the connection to database
        connection = DBConnection.getDBConnection().getConnection();

        //views all students when the window opens
        jBtnViewAll.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTxtSearch = new javax.swing.JTextField();
        jBtnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBtnBack = new javax.swing.JButton();
        jRadioButtonAdmissionNumber = new javax.swing.JRadioButton();
        jRadioButtonStudentID = new javax.swing.JRadioButton();
        jBtnViewAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("View All Students");
        setResizable(false);

        jTxtSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jBtnSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBtnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jBtnSearch.setText("Search");
        jBtnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnSearchMouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Admission Number", "Faculty", "Year"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        jBtnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBtnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/back.png"))); // NOI18N
        jBtnBack.setText("Back");
        jBtnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnBackMouseClicked(evt);
            }
        });
        jBtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBackActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonAdmissionNumber);
        jRadioButtonAdmissionNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jRadioButtonAdmissionNumber.setText("Search by Admission Number");

        buttonGroup1.add(jRadioButtonStudentID);
        jRadioButtonStudentID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jRadioButtonStudentID.setSelected(true);
        jRadioButtonStudentID.setText("Search by Student ID");

        jBtnViewAll.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBtnViewAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/view_all.png"))); // NOI18N
        jBtnViewAll.setText("View All");
        jBtnViewAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnViewAllMouseClicked(evt);
            }
        });
        jBtnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnViewAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jRadioButtonStudentID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButtonAdmissionNumber))
                            .addComponent(jTxtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jBtnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                        .addComponent(jBtnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jBtnViewAll, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonAdmissionNumber)
                    .addComponent(jRadioButtonStudentID))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBtnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnBackMouseClicked
        this.dispose();
        new HomePage().setVisible(true);
    }//GEN-LAST:event_jBtnBackMouseClicked

    private void jBtnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnSearchMouseClicked
        NoOfStudents = 0;
        haveStudents = false;

        if (jRadioButtonStudentID.isSelected()) {
            String searchStudentID = jTxtSearch.getText();

            if (!jTxtSearch.getText().equals("")) {
                //searches the database for given studentID
                try {
                    searchByStudentID(searchStudentID);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

                if (haveStudents) {
                    loadToTable(studentDetails);
                } else {
                    DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
                    table.setNumRows(0);
                    JOptionPane.showMessageDialog(null, "No students found by given Student ID");
                }
            } else if (jTxtSearch.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Enter the Student ID");
            }
        }

        if (jRadioButtonAdmissionNumber.isSelected()) {
            String searchAdmissionNumber = jTxtSearch.getText();

            if (!jTxtSearch.getText().equals("")) {
                //searches the database for given admission number
                try {
                    searchByAdmissionNumber(searchAdmissionNumber);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

                if (haveStudents) {
                    loadToTable(studentDetails);                    
                } else {
                    DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
                    table.setNumRows(0);
                    JOptionPane.showMessageDialog(null, "No students found by given Admission Number");
                }
            } else if (jTxtSearch.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Enter the Admission Number");
            }
        }
    }//GEN-LAST:event_jBtnSearchMouseClicked

    private void jBtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtnBackActionPerformed

    private void jBtnViewAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnViewAllMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtnViewAllMouseClicked

    private void jBtnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnViewAllActionPerformed
        NoOfStudents = 0;
        haveStudents = false;

        //gets all students from the database
        try {
            getAllStudents();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

        if (haveStudents) {
            loadToTable(studentDetails);
        } else {
            DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
            table.setNumRows(0);
            JOptionPane.showMessageDialog(null, "No students found in database");
        }
    }//GEN-LAST:event_jBtnViewAllActionPerformed

    public Object[][] searchByStudentID(String studentID) throws SQLException {
        //searches the student table for given stident ID
        try {
            String query = "SELECT * FROM student WHERE Student_ID = " + "'" + studentID + "'";

            statement = connection.createStatement();
            rsltSet = statement.executeQuery(query);

            //if the result set is not empty
            if (rsltSet.next()) {
                haveStudents = true;

                //counts the number of students by given student ID
                rsltSet.beforeFirst();
                while (rsltSet.next()) {
                    NoOfStudents++;
                }

                //inserts details of all students in to arrays
                studentDetails = new Object[NoOfStudents][5];
                rsltSet.beforeFirst();
                for (int i = 0; i < NoOfStudents; i++) {
                    rsltSet.next();

                    studentDetails[i][0] = rsltSet.getInt(1);
                    studentDetails[i][1] = rsltSet.getString(2);
                    studentDetails[i][2] = rsltSet.getString(3);
                    studentDetails[i][3] = rsltSet.getString(4);
                    studentDetails[i][4] = rsltSet.getInt(5);
                }

                statement.close();
                rsltSet.close();
            } else {
                haveStudents = false;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        return studentDetails;
    }

    public Object[][] searchByAdmissionNumber(String admissionNumber) throws SQLException {
        //searches the student table for given admission number
        try {
            String query = "SELECT * FROM student WHERE Admission_Number = " + "'" + admissionNumber + "'";

            statement = connection.createStatement();
            rsltSet = statement.executeQuery(query);

            //if the result set is not empty
            if (rsltSet.next()) {
                haveStudents = true;

                //counts the number of students by given admission number
                rsltSet.beforeFirst();
                while (rsltSet.next()) {
                    NoOfStudents++;
                }

                //inserts details of all students in to arrays
                studentDetails = new Object[NoOfStudents][5];
                rsltSet.beforeFirst();
                for (int i = 0; i < NoOfStudents; i++) {
                    rsltSet.next();

                    studentDetails[i][0] = rsltSet.getInt(1);
                    studentDetails[i][1] = rsltSet.getString(2);
                    studentDetails[i][2] = rsltSet.getString(3);
                    studentDetails[i][3] = rsltSet.getString(4);
                    studentDetails[i][4] = rsltSet.getInt(5);
                }

                statement.close();
                rsltSet.close();
            } else {
                haveStudents = false;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        return studentDetails;
    }

    public Object[][] getAllStudents() throws SQLException {
        //searches all books in the student table
        try {
            String query = "SELECT * FROM student";

            statement = connection.createStatement();
            rsltSet = statement.executeQuery(query);

            //if the result set is not empty
            if (rsltSet.next()) {
                haveStudents = true;

                //counts the number of students
                rsltSet.beforeFirst();
                while (rsltSet.next()) {
                    NoOfStudents++;
                }

                //inserts details of all students in to arrays
                studentDetails = new Object[NoOfStudents][5];
                rsltSet.beforeFirst();
                for (int i = 0; i < NoOfStudents; i++) {
                    rsltSet.next();

                    studentDetails[i][0] = rsltSet.getInt(1);
                    studentDetails[i][1] = rsltSet.getString(2);
                    studentDetails[i][2] = rsltSet.getString(3);
                    studentDetails[i][3] = rsltSet.getString(4);
                    studentDetails[i][4] = rsltSet.getInt(5);
                }

                statement.close();
                rsltSet.close();
            } else {
                haveStudents = false;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

        return studentDetails;
    }

    private void loadToTable(Object[][] studentDetails) {
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
        table.setNumRows(0);

        for (int i = 0; i < NoOfStudents; i++) {
            Object[] row = {studentDetails[i][0], studentDetails[i][1], studentDetails[i][2], studentDetails[i][3], studentDetails[i][4]};

            table.addRow(row);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAllStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAllStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAllStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAllStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAllStudents().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBtnBack;
    private javax.swing.JButton jBtnSearch;
    private javax.swing.JButton jBtnViewAll;
    private javax.swing.JRadioButton jRadioButtonAdmissionNumber;
    private javax.swing.JRadioButton jRadioButtonStudentID;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTxtSearch;
    // End of variables declaration//GEN-END:variables
}
