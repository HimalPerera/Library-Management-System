/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrames;

import DB.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Himal
 */
public class ReturnBook extends javax.swing.JFrame {

    //declaring instance variables
    Connection connection;
    Statement statement;
    ResultSet rsltSet;
    PreparedStatement pStatement;

    boolean isStudentIDValid = false;
    boolean isStudentHasBorrowed = false;

    int DBBookID = 0;
    String DBTitle = "";
    String DBAuthor = "";
    int DBNoOfPages = 0;
    int DBLendingPeriod = 0;
    double DBFinePerDay = 0.0;
    Date DBIssuedDate = null;

    int DBStudentID = 0;
    String DBName = "";
    String DBAdmissionNumber = "";
    String DBFaculty = "";
    int DBYear = 0;

    Date DBShouldReturnDate = null;
    int DBDelayedDays = 0;
    double DBTotalFine = 0;

    int NoOfBooksToBeReturned = 0;
    Date DBReturnDate = null;

    Object[][] bookDetails;

    int bookNumber = 1;
    int returnedBookID = 0;
    int[] returnedBookIDs;
    int noOfReturnedBooks = 0;
    boolean hasAlreadyReturned = false;

    /**
     * Creates new form ReturnBook
     */
    public ReturnBook() {
        initComponents();

        //disables the specific components
        jTextFieldName.setEnabled(false);
        jTextFieldAdmissionNumber.setEnabled(false);
        jTextFieldFaculty.setEnabled(false);
        jTextFieldYear.setEnabled(false);
        jTextFieldNoOfBooksToBeReturned.setEnabled(false);
        jTextFieldBookId.setEnabled(false);
        jTextFieldTitle.setEnabled(false);
        jTextFieldAuthor.setEnabled(false);
        jTextFieldNoOfPages.setEnabled(false);
        jTextFieldLendingPeriod.setEnabled(false);
        jTextFieldFinePerDay.setEnabled(false);
        jTextFieldIssuedDate.setEnabled(false);
        jTextFieldShouldReturnDate.setEnabled(false);
        jTextFieldNoOfDelayedDays.setEnabled(false);
        jTextFieldTotalFine.setEnabled(false);

        jCheckBoxFinePaid.setEnabled(false);

        jButtonNext.setEnabled(false);
        jButtonPrevious.setEnabled(false);
        jButtonCheckForFine.setEnabled(false);
        jButtonReturnBook.setEnabled(false);

        //initializes the connection to database
        connection = DBConnection.getDBConnection().getConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldStudentID = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldYear = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldAdmissionNumber = new javax.swing.JTextField();
        jTextFieldFaculty = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldNoOfBooksToBeReturned = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextFieldTitle = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldIssuedDate = new javax.swing.JTextField();
        jTextFieldNoOfPages = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldLendingPeriod = new javax.swing.JTextField();
        jTextFieldAuthor = new javax.swing.JTextField();
        jTextFieldBookId = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldFinePerDay = new javax.swing.JTextField();
        jButtonNext = new javax.swing.JButton();
        jButtonPrevious = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jDateChooserReturnDate = new com.toedter.calendar.JDateChooser();
        jTextFieldTotalFine = new javax.swing.JTextField();
        jCheckBoxFinePaid = new javax.swing.JCheckBox();
        jButtonBack = new javax.swing.JButton();
        jButtonReturnBook = new javax.swing.JButton();
        jButtonCheckForFine = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldShouldReturnDate = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldNoOfDelayedDays = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Return Books");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Student ID");
        jLabel1.setMaximumSize(new java.awt.Dimension(34, 15));
        jLabel1.setMinimumSize(new java.awt.Dimension(34, 15));
        jLabel1.setPreferredSize(new java.awt.Dimension(34, 15));

        jTextFieldStudentID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jButtonSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/search.png"))); // NOI18N
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)), "Student Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(0, 153, 204))); // NOI18N

        jTextFieldName.setEditable(false);
        jTextFieldName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Faculty");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Name");

        jTextFieldYear.setEditable(false);
        jTextFieldYear.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Year");

        jTextFieldAdmissionNumber.setEditable(false);
        jTextFieldAdmissionNumber.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTextFieldFaculty.setEditable(false);
        jTextFieldFaculty.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Admission Number");

        jTextFieldNoOfBooksToBeReturned.setEditable(false);
        jTextFieldNoOfBooksToBeReturned.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("Number of books to be returned");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldFaculty)
                    .addComponent(jTextFieldYear)
                    .addComponent(jTextFieldName)
                    .addComponent(jTextFieldAdmissionNumber)
                    .addComponent(jTextFieldNoOfBooksToBeReturned, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAdmissionNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNoOfBooksToBeReturned, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 102)), "Book Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(204, 0, 204))); // NOI18N

        jTextFieldTitle.setEditable(false);
        jTextFieldTitle.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Title");

        jTextFieldIssuedDate.setEditable(false);
        jTextFieldIssuedDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTextFieldNoOfPages.setEditable(false);
        jTextFieldNoOfPages.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Fine per day (Rs)");

        jTextFieldLendingPeriod.setEditable(false);
        jTextFieldLendingPeriod.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTextFieldAuthor.setEditable(false);
        jTextFieldAuthor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jTextFieldBookId.setEditable(false);
        jTextFieldBookId.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Book ID");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Issued Date");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Author");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Number of Pages");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Lending Period in days");

        jTextFieldFinePerDay.setEditable(false);
        jTextFieldFinePerDay.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldBookId, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldNoOfPages, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldLendingPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldFinePerDay, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldIssuedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldBookId)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldTitle)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldAuthor)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldNoOfPages)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldLendingPeriod)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldFinePerDay)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldIssuedDate)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButtonNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/next.png"))); // NOI18N
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jButtonPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/previous.png"))); // NOI18N
        jButtonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviousActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("Fine to be paid (Rs)");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("Date of Return");

        jDateChooserReturnDate.setDateFormatString("dd/MMM/yyyy");
        jDateChooserReturnDate.setEnabled(false);
        jDateChooserReturnDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jDateChooserReturnDate.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jDateChooserReturnDateCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jDateChooserReturnDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooserReturnDatePropertyChange(evt);
            }
        });

        jTextFieldTotalFine.setEditable(false);
        jTextFieldTotalFine.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jCheckBoxFinePaid.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCheckBoxFinePaid.setText("Fine paid");
        jCheckBoxFinePaid.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jButtonBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/back.png"))); // NOI18N
        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonReturnBook.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonReturnBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/return_book.png"))); // NOI18N
        jButtonReturnBook.setText("Return Book");
        jButtonReturnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReturnBookActionPerformed(evt);
            }
        });

        jButtonCheckForFine.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonCheckForFine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/check fine.png"))); // NOI18N
        jButtonCheckForFine.setText("Check for Fines");
        jButtonCheckForFine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckForFineActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("Should return date");

        jTextFieldShouldReturnDate.setEditable(false);
        jTextFieldShouldReturnDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("Number of days delayed");

        jTextFieldNoOfDelayedDays.setEditable(false);
        jTextFieldNoOfDelayedDays.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonReturnBook))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jCheckBoxFinePaid)
                                        .addComponent(jTextFieldTotalFine, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextFieldNoOfDelayedDays, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldShouldReturnDate, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDateChooserReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonCheckForFine))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(jButtonPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSearch)
                .addGap(309, 309, 309))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldStudentID)
                    .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jButtonPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooserReturnDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonCheckForFine, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldShouldReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNoOfDelayedDays, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldTotalFine, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxFinePaid)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonReturnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        //if the bookID textfield is not empty
        if (!jTextFieldStudentID.getText().equals("")) {
            shouldCheckForFines();

            //checks whether the input for the studentID is a number
            try {
                int x = Integer.parseInt(jTextFieldStudentID.getText());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Enter a valid number for student ID");
                return;
            }

            int studentID = Integer.parseInt(jTextFieldStudentID.getText());
            DBStudentID = studentID;
            NoOfBooksToBeReturned = 0;
            bookNumber = 1;

            //searches the issued_book table for given studentID
            try {
                String query = "SELECT * FROM issued_book WHERE Student_ID = " + "'" + studentID + "'";

                statement = connection.createStatement();
                rsltSet = statement.executeQuery(query);

                //if the result set is not empty
                if (rsltSet.next()) {
                    isStudentIDValid = true;
                    isStudentHasBorrowed = true;

                    //counts the number of books to be returned by the specific student
                    rsltSet.beforeFirst();
                    while (rsltSet.next()) {
                        NoOfBooksToBeReturned++;
                    }

                    //inserts details of all books to be returned in to arrays
                    bookDetails = new Object[NoOfBooksToBeReturned][7];
                    rsltSet.beforeFirst();
                    for (int i = 0; i < NoOfBooksToBeReturned; i++) {
                        rsltSet.next();

                        bookDetails[i][0] = rsltSet.getInt(1);
                        bookDetails[i][1] = rsltSet.getString(2);
                        bookDetails[i][2] = rsltSet.getString(3);
                        bookDetails[i][3] = rsltSet.getInt(4);
                        bookDetails[i][4] = rsltSet.getInt(5);
                        bookDetails[i][5] = rsltSet.getDouble(6);
                        bookDetails[i][6] = rsltSet.getDate(12);
                    }

                    rsltSet.first(); //selects the first row of the result set
                    DBName = rsltSet.getString(8);
                    DBAdmissionNumber = rsltSet.getString(9);
                    DBFaculty = rsltSet.getString(10);
                    DBYear = rsltSet.getInt(11);

                    //enables the specific text fields
                    jTextFieldName.setEnabled(true);
                    jTextFieldAdmissionNumber.setEnabled(true);
                    jTextFieldFaculty.setEnabled(true);
                    jTextFieldYear.setEnabled(true);
                    jTextFieldNoOfBooksToBeReturned.setEnabled(true);

                    jTextFieldName.setText(DBName);
                    jTextFieldAdmissionNumber.setText(DBAdmissionNumber);
                    jTextFieldFaculty.setText(DBFaculty);
                    jTextFieldYear.setText(String.valueOf(DBYear));
                    jTextFieldNoOfBooksToBeReturned.setText(String.valueOf(NoOfBooksToBeReturned));

                    statement.close();
                    rsltSet.close();
                } else {
                    isStudentHasBorrowed = false;

                    jTextFieldName.setText(null);
                    jTextFieldAdmissionNumber.setText(null);
                    jTextFieldFaculty.setText(null);
                    jTextFieldYear.setText(null);
                    jTextFieldNoOfBooksToBeReturned.setText(null);

                    //disables the specific text fields
                    jTextFieldName.setEnabled(false);
                    jTextFieldAdmissionNumber.setEnabled(false);
                    jTextFieldFaculty.setEnabled(false);
                    jTextFieldYear.setEnabled(false);
                    jTextFieldNoOfBooksToBeReturned.setEnabled(false);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }

            //displays the details of the first book that has been issued
            if (isStudentHasBorrowed) {
                //creats an array of length = NoOfBooksToBeReturned to store IDs of returned books
                returnedBookIDs = new int[NoOfBooksToBeReturned];

                jTextFieldBookId.setEnabled(true);
                jTextFieldTitle.setEnabled(true);
                jTextFieldAuthor.setEnabled(true);
                jTextFieldNoOfPages.setEnabled(true);
                jTextFieldLendingPeriod.setEnabled(true);
                jTextFieldFinePerDay.setEnabled(true);
                jTextFieldIssuedDate.setEnabled(true);

                DBBookID = (int) bookDetails[0][0];
                DBTitle = (String) bookDetails[0][1];
                DBAuthor = (String) bookDetails[0][2];
                DBNoOfPages = (int) bookDetails[0][3];
                DBLendingPeriod = (int) bookDetails[0][4];
                DBFinePerDay = (double) bookDetails[0][5];
                DBIssuedDate = (Date) bookDetails[0][6];

                SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");

                jTextFieldBookId.setText(String.valueOf(DBBookID));
                jTextFieldTitle.setText(DBTitle);
                jTextFieldAuthor.setText(DBAuthor);
                jTextFieldNoOfPages.setText(String.valueOf(DBNoOfPages));
                jTextFieldLendingPeriod.setText(String.valueOf(DBLendingPeriod));
                jTextFieldFinePerDay.setText(String.valueOf(DBFinePerDay));
                jTextFieldIssuedDate.setText(sdf.format(DBIssuedDate));

                if (NoOfBooksToBeReturned == 1) {
                    jButtonCheckForFine.setEnabled(true);
                    jDateChooserReturnDate.setEnabled(true);
                    shouldCheckForFines();
                    jButtonNext.setEnabled(false);
                    jButtonPrevious.setEnabled(false);
                    jButtonReturnBook.setEnabled(false);
                } else if (NoOfBooksToBeReturned > 1) {
                    jButtonNext.setEnabled(true);
                    jButtonCheckForFine.setEnabled(true);
                    jDateChooserReturnDate.setEnabled(true);
                    shouldCheckForFines();
                    jButtonPrevious.setEnabled(false);
                    jButtonReturnBook.setEnabled(false);
                }

            } else {
                jTextFieldBookId.setText(null);
                jTextFieldTitle.setText(null);
                jTextFieldAuthor.setText(null);
                jTextFieldNoOfPages.setText(null);
                jTextFieldLendingPeriod.setText(null);
                jTextFieldFinePerDay.setText(null);
                jTextFieldIssuedDate.setText(null);

                jTextFieldBookId.setEnabled(false);
                jTextFieldTitle.setEnabled(false);
                jTextFieldAuthor.setEnabled(false);
                jTextFieldNoOfPages.setEnabled(false);
                jTextFieldLendingPeriod.setEnabled(false);
                jTextFieldFinePerDay.setEnabled(false);
                jTextFieldIssuedDate.setEnabled(false);
            }

            //searches the student table for given studentID if not found in issued_book table
            if (!isStudentHasBorrowed) {
                try {
                    String query = "SELECT * FROM student WHERE Student_ID = " + "'" + studentID + "'";

                    statement = connection.createStatement();
                    rsltSet = statement.executeQuery(query);

                    //if the result set is not empty
                    if (rsltSet.next()) {
                        isStudentIDValid = true;

                        rsltSet.first(); //selects the last row of the result set
                        String Name = rsltSet.getString(2);
                        String AdmissionNumber = rsltSet.getString(3);
                        String Faculty = rsltSet.getString(4);
                        int Year = rsltSet.getInt(5);

                        //enables the specific text fields
                        jTextFieldName.setEnabled(true);
                        jTextFieldAdmissionNumber.setEnabled(true);
                        jTextFieldFaculty.setEnabled(true);
                        jTextFieldYear.setEnabled(true);

                        jTextFieldName.setText(Name);
                        jTextFieldAdmissionNumber.setText(AdmissionNumber);
                        jTextFieldFaculty.setText(Faculty);
                        jTextFieldYear.setText(String.valueOf(Year));
                        jTextFieldNoOfBooksToBeReturned.setText("No books to be returned");

                        statement.close();
                        rsltSet.close();

                        jButtonCheckForFine.setEnabled(false);
                        jButtonNext.setEnabled(false);
                        jButtonPrevious.setEnabled(false);
                        jButtonReturnBook.setEnabled(false);
                        jCheckBoxFinePaid.setEnabled(false);
                        jDateChooserReturnDate.setDate(null);
                        jDateChooserReturnDate.setEnabled(false);
                    } else {
                        jTextFieldName.setText(null);
                        jTextFieldAdmissionNumber.setText(null);
                        jTextFieldFaculty.setText(null);
                        jTextFieldYear.setText(null);
                        jTextFieldNoOfBooksToBeReturned.setText(null);

                        //disables the specific components
                        jTextFieldName.setEnabled(false);
                        jTextFieldAdmissionNumber.setEnabled(false);
                        jTextFieldFaculty.setEnabled(false);
                        jTextFieldYear.setEnabled(false);
                        jTextFieldNoOfBooksToBeReturned.setEnabled(false);

                        jButtonCheckForFine.setEnabled(false);
                        jDateChooserReturnDate.setDate(null);
                        jDateChooserReturnDate.setEnabled(false);
                        jButtonNext.setEnabled(false);
                        jButtonPrevious.setEnabled(false);
                        jCheckBoxFinePaid.setEnabled(false);
                        jButtonReturnBook.setEnabled(false);

                        JOptionPane.showMessageDialog(this, "Enter a valid Student ID");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            }

        } else if (jTextFieldStudentID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter the Student ID");
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        shouldCheckForFines();

        if (bookNumber < NoOfBooksToBeReturned) {
            DBBookID = (int) bookDetails[bookNumber][0];
            DBTitle = (String) bookDetails[bookNumber][1];
            DBAuthor = (String) bookDetails[bookNumber][2];
            DBNoOfPages = (int) bookDetails[bookNumber][3];
            DBLendingPeriod = (int) bookDetails[bookNumber][4];
            DBFinePerDay = (double) bookDetails[bookNumber][5];
            DBIssuedDate = (Date) bookDetails[bookNumber][6];

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");

            jTextFieldBookId.setText(String.valueOf(DBBookID));
            jTextFieldTitle.setText(DBTitle);
            jTextFieldAuthor.setText(DBAuthor);
            jTextFieldNoOfPages.setText(String.valueOf(DBNoOfPages));
            jTextFieldLendingPeriod.setText(String.valueOf(DBLendingPeriod));
            jTextFieldFinePerDay.setText(String.valueOf(DBFinePerDay));
            jTextFieldIssuedDate.setText(sdf.format(DBIssuedDate));

            jButtonPrevious.setEnabled(true);

            bookNumber++;

            if (bookNumber == NoOfBooksToBeReturned) {
                jButtonNext.setEnabled(false);
            }
        } else {
            jButtonNext.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jButtonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviousActionPerformed
        shouldCheckForFines();

        if (bookNumber > 0) {
            bookNumber--;

            DBBookID = (int) bookDetails[bookNumber - 1][0];
            DBTitle = (String) bookDetails[bookNumber - 1][1];
            DBAuthor = (String) bookDetails[bookNumber - 1][2];
            DBNoOfPages = (int) bookDetails[bookNumber - 1][3];
            DBLendingPeriod = (int) bookDetails[bookNumber - 1][4];
            DBFinePerDay = (double) bookDetails[bookNumber - 1][5];
            DBIssuedDate = (Date) bookDetails[bookNumber - 1][6];

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");

            jTextFieldBookId.setText(String.valueOf(DBBookID));
            jTextFieldTitle.setText(DBTitle);
            jTextFieldAuthor.setText(DBAuthor);
            jTextFieldNoOfPages.setText(String.valueOf(DBNoOfPages));
            jTextFieldLendingPeriod.setText(String.valueOf(DBLendingPeriod));
            jTextFieldFinePerDay.setText(String.valueOf(DBFinePerDay));
            jTextFieldIssuedDate.setText(sdf.format(DBIssuedDate));

            jButtonNext.setEnabled(true);

            if (bookNumber == 1) {
                jButtonPrevious.setEnabled(false);
            }
        } else {
            jButtonPrevious.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonPreviousActionPerformed

    private void jButtonCheckForFineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckForFineActionPerformed
        if (jDateChooserReturnDate.getDate() != null) {
            DBReturnDate = jDateChooserReturnDate.getDate();
            boolean isReturnDateValid = isReturnDateValid(DBIssuedDate, DBReturnDate);

            if (isReturnDateValid) {
                DBShouldReturnDate = getShouldReturnDate(DBIssuedDate, DBLendingPeriod);

                jTextFieldShouldReturnDate.setEnabled(true);
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");
                jTextFieldShouldReturnDate.setText(sdf.format(DBShouldReturnDate));

                DBDelayedDays = calculateDelayedDays(DBReturnDate, DBShouldReturnDate);
                jTextFieldNoOfDelayedDays.setEnabled(true);
                jTextFieldNoOfDelayedDays.setText(String.valueOf(DBDelayedDays));

                if (DBDelayedDays >= 1) {
                    DBTotalFine = calculateFine(DBDelayedDays, DBFinePerDay);
                    jTextFieldTotalFine.setEnabled(true);
                    jTextFieldTotalFine.setText(String.valueOf(DBTotalFine));
                    jCheckBoxFinePaid.setEnabled(true);
                } else {
                    DBTotalFine = 0.0;
                    jTextFieldTotalFine.setText(String.valueOf(DBTotalFine));
                    jCheckBoxFinePaid.setEnabled(false);
                }

                jButtonReturnBook.setEnabled(true);

            } else {
                JOptionPane.showMessageDialog(null, "Enter a valid date");

                jTextFieldShouldReturnDate.setText(null);
                jTextFieldNoOfDelayedDays.setText(null);
                jTextFieldTotalFine.setText(null);
                jCheckBoxFinePaid.setSelected(false);

                jTextFieldShouldReturnDate.setEnabled(false);
                jTextFieldNoOfDelayedDays.setEnabled(false);
                jTextFieldTotalFine.setEnabled(false);
                jCheckBoxFinePaid.setEnabled(false);

                jButtonReturnBook.setEnabled(false);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Enter the return date");

            jTextFieldShouldReturnDate.setText(null);
            jTextFieldNoOfDelayedDays.setText(null);
            jTextFieldTotalFine.setText(null);
            jCheckBoxFinePaid.setSelected(false);

            jTextFieldShouldReturnDate.setEnabled(false);
            jTextFieldNoOfDelayedDays.setEnabled(false);
            jTextFieldTotalFine.setEnabled(false);
            jCheckBoxFinePaid.setEnabled(false);

            jButtonReturnBook.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonCheckForFineActionPerformed

    private void jButtonReturnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReturnBookActionPerformed
        //checks whether the book has been already returned
        for (int i = 0; i < NoOfBooksToBeReturned; i++) {
            if (DBBookID == returnedBookIDs[i]) {
                hasAlreadyReturned = true;
            }
        }

        if (((DBTotalFine > 0 && jCheckBoxFinePaid.isSelected()) || DBTotalFine == 0) && !hasAlreadyReturned) {
            boolean isDeleted = false;

            //deletes the row in the book_issue table which has the specific book ID
            try {
                String query = "DELETE FROM issued_book WHERE Book_ID = " + "'" + DBBookID + "'";

                pStatement = connection.prepareStatement(query);
                pStatement.execute();
                pStatement.close();
                isDeleted = true;
            } catch (SQLException ex) {
                Logger.getLogger(ReturnBook.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex);
            }

            if (isDeleted) {
                //inserts the data into returned_book table
                try {
                    String query = "INSERT INTO returned_book (Book_ID, Title, Author, NoOfPages, Lending_Period, Fine_Per_Day, Student_ID, Name, Admission_Number, Faculty, Year, Issued_Date, Returned_Date, NoOfDelayed_Days, Paid_Fine) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                    pStatement = connection.prepareStatement(query);

                    pStatement.setInt(1, DBBookID);
                    pStatement.setString(2, DBTitle);
                    pStatement.setString(3, DBAuthor);
                    pStatement.setInt(4, DBNoOfPages);
                    pStatement.setInt(5, DBLendingPeriod);
                    pStatement.setDouble(6, DBFinePerDay);
                    pStatement.setInt(7, DBStudentID);
                    pStatement.setString(8, DBName);
                    pStatement.setString(9, DBAdmissionNumber);
                    pStatement.setString(10, DBFaculty);
                    pStatement.setInt(11, DBYear);
                    java.sql.Date DBIssuedDateSql = new java.sql.Date(DBIssuedDate.getTime());
                    pStatement.setDate(12, DBIssuedDateSql);
                    java.sql.Date DBReturnedDateSql = new java.sql.Date(DBReturnDate.getTime());
                    pStatement.setDate(13, DBReturnedDateSql);
                    pStatement.setInt(14, DBDelayedDays);
                    pStatement.setDouble(15, DBTotalFine);
                    pStatement.execute();
                    pStatement.close();

                    returnedBookID = DBBookID;
                    returnedBookIDs[noOfReturnedBooks] = returnedBookID;
                    noOfReturnedBooks++;

                    JOptionPane.showMessageDialog(null, "Return Successful");

                    jButtonReturnBook.setEnabled(false);
                } catch (SQLException ex) {
                    Logger.getLogger(ReturnBook.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Operation failed. Try again");
            }

        } else if (DBTotalFine > 0 && !jCheckBoxFinePaid.isSelected()) {
            JOptionPane.showMessageDialog(null, "Fine should be paid");
        } else if (hasAlreadyReturned) {
            JOptionPane.showMessageDialog(null, "This book has been already returned");
        }
    }//GEN-LAST:event_jButtonReturnBookActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        this.dispose();
        new HomePage().setVisible(true);
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jDateChooserReturnDateCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jDateChooserReturnDateCaretPositionChanged

    }//GEN-LAST:event_jDateChooserReturnDateCaretPositionChanged

    private void jDateChooserReturnDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooserReturnDatePropertyChange
        shouldCheckForFines();
    }//GEN-LAST:event_jDateChooserReturnDatePropertyChange

    public boolean isReturnDateValid(Date issuedDate, Date returnDate) {
        boolean isValid = false;
        Date currentDate = new Date();
        long currentDateMillis = currentDate.getTime();
        long issuedDateMillis = issuedDate.getTime();
        long returnDateMillis = returnDate.getTime();

        if (returnDateMillis <= currentDateMillis && returnDateMillis >= issuedDateMillis) {
            isValid = true;
        } else {
            isValid = false;
        }
        return isValid;
    }

    public int calculateDelayedDays(Date returnDate, Date shouldReturnDate) {
        int delayedDays = 0;

        long shouldReturnDateMillis = shouldReturnDate.getTime();
        long returnDateMillis = returnDate.getTime();
        long diff = returnDateMillis - shouldReturnDateMillis;
        delayedDays = (int) (diff / (24 * 60 * 60 * 1000));

        if (delayedDays >= 1) {
            return delayedDays;
        } else {
            delayedDays = 0;
            return delayedDays;
        }
    }

    public Date getShouldReturnDate(Date issuedDate, int lendingPeriod) {
        Date currentDate = new Date();
        long currentDateMillis = currentDate.getTime();
        long issuedDateMillis = issuedDate.getTime();
        long shouldReturnDateMillis = issuedDateMillis + ((DBLendingPeriod) * (24 * 60 * 60 * 1000));
        Date shouldReturnDate = new Date(shouldReturnDateMillis);

        return shouldReturnDate;
    }

    public double calculateFine(int delayedDays, double finePerDay) {
        double totalFine = 0;

        totalFine = delayedDays * finePerDay;

        return totalFine;
    }

    public void shouldCheckForFines() {
        jTextFieldShouldReturnDate.setText(null);
        jTextFieldNoOfDelayedDays.setText(null);
        jTextFieldTotalFine.setText(null);
        jCheckBoxFinePaid.setSelected(false);

        jTextFieldShouldReturnDate.setEnabled(false);
        jTextFieldNoOfDelayedDays.setEnabled(false);
        jTextFieldTotalFine.setEnabled(false);
        jCheckBoxFinePaid.setEnabled(false);

        jButtonReturnBook.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReturnBook().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonCheckForFine;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrevious;
    private javax.swing.JButton jButtonReturnBook;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JCheckBox jCheckBoxFinePaid;
    private com.toedter.calendar.JDateChooser jDateChooserReturnDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldAdmissionNumber;
    private javax.swing.JTextField jTextFieldAuthor;
    private javax.swing.JTextField jTextFieldBookId;
    private javax.swing.JTextField jTextFieldFaculty;
    private javax.swing.JTextField jTextFieldFinePerDay;
    private javax.swing.JTextField jTextFieldIssuedDate;
    private javax.swing.JTextField jTextFieldLendingPeriod;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldNoOfBooksToBeReturned;
    private javax.swing.JTextField jTextFieldNoOfDelayedDays;
    private javax.swing.JTextField jTextFieldNoOfPages;
    private javax.swing.JTextField jTextFieldShouldReturnDate;
    private javax.swing.JTextField jTextFieldStudentID;
    private javax.swing.JTextField jTextFieldTitle;
    private javax.swing.JTextField jTextFieldTotalFine;
    private javax.swing.JTextField jTextFieldYear;
    // End of variables declaration//GEN-END:variables
}
